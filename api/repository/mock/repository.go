// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dto "test-exercise/api/dto"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: event
func (_m *Repository) AddEvent(event *dto.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCompany provides a mock function with given fields: _a0
func (_m *Repository) CreateCompany(_a0 *dto.Company) (*dto.Company, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Company
	if rf, ok := ret.Get(0).(func(*dto.Company) *dto.Company); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.Company) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompany provides a mock function with given fields: _a0
func (_m *Repository) DeleteCompany(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompany provides a mock function with given fields: _a0
func (_m *Repository) GetCompany(_a0 int) (*dto.Company, error) {
	ret := _m.Called(_a0)

	var r0 *dto.Company
	if rf, ok := ret.Get(0).(func(int) *dto.Company); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: _a0
func (_m *Repository) GetUser(_a0 string) (*dto.User, error) {
	ret := _m.Called(_a0)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(string) *dto.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: _a0
func (_m *Repository) UpdateCompany(_a0 *dto.Company) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.Company) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
